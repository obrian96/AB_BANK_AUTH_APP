{"ast":null,"code":"import _regeneratorRuntime from \"D:/MSALDotNetAPI/MSALDotNetAPI/ClientApp/node_modules/@babel/runtime/regenerator\";\nimport _get from \"D:/MSALDotNetAPI/MSALDotNetAPI/ClientApp/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:/MSALDotNetAPI/MSALDotNetAPI/ClientApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:/MSALDotNetAPI/MSALDotNetAPI/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/MSALDotNetAPI/MSALDotNetAPI/ClientApp/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"D:/MSALDotNetAPI/MSALDotNetAPI/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/MSALDotNetAPI/MSALDotNetAPI/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Injectable, Inject, VERSION, Component, NgModule } from '@angular/core';\nimport { Location, DOCUMENT, CommonModule } from '@angular/common';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { map, concatMap, catchError, switchMap } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/router';\nvar MSAL_INSTANCE = new InjectionToken(\"MSAL_INSTANCE\");\nvar MSAL_GUARD_CONFIG = new InjectionToken(\"MSAL_GUARD_CONFIG\");\nvar MSAL_INTERCEPTOR_CONFIG = new InjectionToken(\"MSAL_INTERCEPTOR_CONFIG\");\n/* eslint-disable header/header */\n\nvar name = \"@azure/msal-angular\";\nvar version = \"2.0.2\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar MsalService = /*#__PURE__*/function () {\n  function MsalService(instance, location) {\n    _classCallCheck(this, MsalService);\n\n    this.instance = instance;\n    this.location = location;\n    var hash = this.location.path(true).split(\"#\").pop();\n\n    if (hash) {\n      this.redirectHash = \"#\".concat(hash);\n    }\n\n    this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\n  }\n\n  _createClass(MsalService, [{\n    key: \"acquireTokenPopup\",\n    value: function acquireTokenPopup(request) {\n      return from(this.instance.acquireTokenPopup(request));\n    }\n  }, {\n    key: \"acquireTokenRedirect\",\n    value: function acquireTokenRedirect(request) {\n      return from(this.instance.acquireTokenRedirect(request));\n    }\n  }, {\n    key: \"acquireTokenSilent\",\n    value: function acquireTokenSilent(silentRequest) {\n      return from(this.instance.acquireTokenSilent(silentRequest));\n    }\n  }, {\n    key: \"handleRedirectObservable\",\n    value: function handleRedirectObservable(hash) {\n      return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\n    }\n  }, {\n    key: \"loginPopup\",\n    value: function loginPopup(request) {\n      return from(this.instance.loginPopup(request));\n    }\n  }, {\n    key: \"loginRedirect\",\n    value: function loginRedirect(request) {\n      return from(this.instance.loginRedirect(request));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(logoutRequest) {\n      return from(this.instance.logout(logoutRequest));\n    }\n  }, {\n    key: \"logoutRedirect\",\n    value: function logoutRedirect(logoutRequest) {\n      return from(this.instance.logoutRedirect(logoutRequest));\n    }\n  }, {\n    key: \"logoutPopup\",\n    value: function logoutPopup(logoutRequest) {\n      return from(this.instance.logoutPopup(logoutRequest));\n    }\n  }, {\n    key: \"ssoSilent\",\n    value: function ssoSilent(request) {\n      return from(this.instance.ssoSilent(request));\n    }\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\n\n  }, {\n    key: \"getLogger\",\n    value: function getLogger() {\n      if (!this.logger) {\n        this.logger = this.instance.getLogger().clone(name, version);\n      }\n\n      return this.logger;\n    } // Create a logger instance for msal-angular with the same options as msal-browser\n\n  }, {\n    key: \"setLogger\",\n    value: function setLogger(logger) {\n      this.logger = logger.clone(name, version);\n      this.instance.setLogger(logger);\n    }\n  }]);\n\n  return MsalService;\n}();\n\nMsalService.ɵfac = function MsalService_Factory(t) {\n  return new (t || MsalService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(ɵngcc1.Location));\n};\n\nMsalService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MsalService,\n  factory: MsalService.ɵfac\n});\n\nMsalService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MSAL_INSTANCE]\n    }]\n  }, {\n    type: Location\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MsalService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: ɵngcc1.Location\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nvar MsalBroadcastService = function MsalBroadcastService(msalInstance, authService) {\n  var _this = this;\n\n  _classCallCheck(this, MsalBroadcastService);\n\n  this.msalInstance = msalInstance;\n  this.authService = authService;\n  this._msalSubject = new Subject();\n  this.msalSubject$ = this._msalSubject.asObservable(); // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n\n  this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\n  this.inProgress$ = this._inProgress.asObservable();\n  this.msalInstance.addEventCallback(function (message) {\n    _this._msalSubject.next(message);\n\n    var status = EventMessageUtils.getInteractionStatusFromEvent(message);\n\n    if (status !== null) {\n      _this.authService.getLogger().verbose(\"BroadcastService - \".concat(message.eventType, \" results in setting inProgress to \").concat(status));\n\n      _this._inProgress.next(status);\n    }\n  });\n};\n\nMsalBroadcastService.ɵfac = function MsalBroadcastService_Factory(t) {\n  return new (t || MsalBroadcastService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(MsalService));\n};\n\nMsalBroadcastService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MsalBroadcastService,\n  factory: MsalBroadcastService.ɵfac\n});\n\nMsalBroadcastService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MSAL_INSTANCE]\n    }]\n  }, {\n    type: MsalService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MsalBroadcastService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: MsalService\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nvar MsalGuard = /*#__PURE__*/function () {\n  function MsalGuard(msalGuardConfig, msalBroadcastService, authService, location, router) {\n    _classCallCheck(this, MsalGuard);\n\n    this.msalGuardConfig = msalGuardConfig;\n    this.msalBroadcastService = msalBroadcastService;\n    this.authService = authService;\n    this.location = location;\n    this.router = router; // Subscribing so events in MsalGuard will set inProgress$ observable\n\n    this.msalBroadcastService.inProgress$.subscribe();\n  }\n  /**\r\n   * Parses url string to UrlTree\r\n   * @param url\r\n   */\n\n\n  _createClass(MsalGuard, [{\n    key: \"parseUrl\",\n    value: function parseUrl(url) {\n      return this.router.parseUrl(url);\n    }\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\n\n  }, {\n    key: \"getDestinationUrl\",\n    value: function getDestinationUrl(path) {\n      this.authService.getLogger().verbose(\"Guard - getting destination url\"); // Absolute base url for the application (default to origin if base element not present)\n\n      var baseElements = document.getElementsByTagName(\"base\");\n      var baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin); // Path of page (including hash, if using hash routing)\n\n      var pathUrl = this.location.prepareExternalUrl(path); // Hash location strategy\n\n      if (pathUrl.startsWith(\"#\")) {\n        this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\n        return \"\".concat(baseUrl, \"/\").concat(pathUrl);\n      }\n      /*\r\n       * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n       * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n       */\n\n\n      return \"\".concat(baseUrl).concat(path);\n    }\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\n\n  }, {\n    key: \"loginInteractively\",\n    value: function loginInteractively(state) {\n      var _this2 = this;\n\n      var authRequest = typeof this.msalGuardConfig.authRequest === \"function\" ? this.msalGuardConfig.authRequest(this.authService, state) : Object.assign({}, this.msalGuardConfig.authRequest);\n\n      if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\n        this.authService.getLogger().verbose(\"Guard - logging in by popup\");\n        return this.authService.loginPopup(authRequest).pipe(map(function (response) {\n          _this2.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\n\n          _this2.authService.instance.setActiveAccount(response.account);\n\n          return true;\n        }));\n      }\n\n      this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\n      var redirectStartPage = this.getDestinationUrl(state.url);\n      return this.authService.loginRedirect(Object.assign({\n        redirectStartPage: redirectStartPage\n      }, authRequest)).pipe(map(function () {\n        return false;\n      }));\n    }\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state\r\n     */\n\n  }, {\n    key: \"activateHelper\",\n    value: function activateHelper(state) {\n      var _this3 = this;\n\n      if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\n        throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\n      }\n\n      this.authService.getLogger().verbose(\"MSAL Guard activated\");\n      /*\r\n       * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n       * short-circuit to prevent redirecting or popups.\r\n       * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n       */\n\n      if (typeof window !== \"undefined\") {\n        if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\n          this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\n          return of(false);\n        }\n      } else {\n        this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\n        return of(true);\n      }\n      /**\r\n       * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n       */\n\n\n      if (this.msalGuardConfig.loginFailedRoute) {\n        this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\n      } // Capture current path before it gets changed by handleRedirectObservable\n\n\n      var currentPath = this.location.path(true);\n      return this.authService.handleRedirectObservable().pipe(concatMap(function () {\n        if (!_this3.authService.instance.getAllAccounts().length) {\n          if (state) {\n            _this3.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\n\n            return _this3.loginInteractively(state);\n          }\n\n          _this3.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\n\n          return of(false);\n        }\n\n        _this3.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\"); // Prevent navigating the app to /#code= or /code=\n\n\n        if (state && currentPath.indexOf(\"code=\") > -1) {\n          _this3.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\"); // Path routing (navigate to current path without hash)\n\n\n          if (currentPath.indexOf(\"#\") > -1) {\n            return of(_this3.parseUrl(_this3.location.path()));\n          } // Hash routing (navigate to root path)\n\n\n          return of(_this3.parseUrl(\"\"));\n        }\n\n        return of(true);\n      }), catchError(function (error) {\n        _this3.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\n\n        _this3.authService.getLogger().errorPii(\"Guard - error: \".concat(error.message));\n        /**\r\n         * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n         * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n         */\n\n\n        if (_this3.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\n          _this3.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\n\n          return of(_this3.loginFailedRoute);\n        }\n\n        return of(false);\n      }));\n    }\n  }, {\n    key: \"canActivate\",\n    value: function canActivate(route, state) {\n      this.authService.getLogger().verbose(\"Guard - canActivate\");\n      return this.activateHelper(state);\n    }\n  }, {\n    key: \"canActivateChild\",\n    value: function canActivateChild(route, state) {\n      this.authService.getLogger().verbose(\"Guard - canActivateChild\");\n      return this.activateHelper(state);\n    }\n  }, {\n    key: \"canLoad\",\n    value: function canLoad() {\n      this.authService.getLogger().verbose(\"Guard - canLoad\"); // @ts-ignore\n\n      return this.activateHelper();\n    }\n  }]);\n\n  return MsalGuard;\n}();\n\nMsalGuard.ɵfac = function MsalGuard_Factory(t) {\n  return new (t || MsalGuard)(ɵngcc0.ɵɵinject(MSAL_GUARD_CONFIG), ɵngcc0.ɵɵinject(MsalBroadcastService), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(ɵngcc2.Router));\n};\n\nMsalGuard.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MsalGuard,\n  factory: MsalGuard.ɵfac\n});\n\nMsalGuard.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MSAL_GUARD_CONFIG]\n    }]\n  }, {\n    type: MsalBroadcastService\n  }, {\n    type: MsalService\n  }, {\n    type: Location\n  }, {\n    type: Router\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MsalGuard, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_GUARD_CONFIG]\n      }]\n    }, {\n      type: MsalBroadcastService\n    }, {\n      type: MsalService\n    }, {\n      type: ɵngcc1.Location\n    }, {\n      type: ɵngcc2.Router\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nvar MsalInterceptor = /*#__PURE__*/function () {\n  function MsalInterceptor(msalInterceptorConfig, authService, location, // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  document) {\n    _classCallCheck(this, MsalInterceptor);\n\n    this.msalInterceptorConfig = msalInterceptorConfig;\n    this.authService = authService;\n    this.location = location;\n    this._document = document;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _createClass(MsalInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var _this4 = this;\n\n      if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\n        throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\n      }\n\n      this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\n      var scopes = this.getScopesForEndpoint(req.url, req.method); // If no scopes for endpoint, does not acquire token\n\n      if (!scopes || scopes.length === 0) {\n        this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\n        return next.handle(req);\n      } // Sets account as active account or first account\n\n\n      var account;\n\n      if (!!this.authService.instance.getActiveAccount()) {\n        this.authService.getLogger().verbose(\"Interceptor - active account selected\");\n        account = this.authService.instance.getActiveAccount();\n      } else {\n        this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\n        account = this.authService.instance.getAllAccounts()[0];\n      }\n\n      var authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\" ? this.msalInterceptorConfig.authRequest(this.authService, req, {\n        account: account\n      }) : Object.assign(Object.assign({}, this.msalInterceptorConfig.authRequest), {\n        account: account\n      });\n      this.authService.getLogger().info(\"Interceptor - \".concat(scopes.length, \" scopes found for endpoint\"));\n      this.authService.getLogger().infoPii(\"Interceptor - [\".concat(scopes, \"] scopes found for \").concat(req.url)); // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\n\n      return this.authService.acquireTokenSilent(Object.assign(Object.assign({}, authRequest), {\n        scopes: scopes,\n        account: account\n      })).pipe(catchError(function () {\n        _this4.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\n\n        return _this4.acquireTokenInteractively(authRequest, scopes);\n      }), switchMap(function (result) {\n        if (!result.accessToken) {\n          _this4.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\n\n          return _this4.acquireTokenInteractively(authRequest, scopes);\n        }\n\n        return of(result);\n      }), switchMap(function (result) {\n        _this4.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\n\n        var headers = req.headers.set(\"Authorization\", \"Bearer \".concat(result.accessToken));\n        var requestClone = req.clone({\n          headers: headers\n        });\n        return next.handle(requestClone);\n      }));\n    }\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\n\n  }, {\n    key: \"acquireTokenInteractively\",\n    value: function acquireTokenInteractively(authRequest, scopes) {\n      if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\n        return this.authService.acquireTokenPopup(Object.assign(Object.assign({}, authRequest), {\n          scopes: scopes\n        }));\n      }\n\n      this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\n      var redirectStartPage = window.location.href;\n      this.authService.acquireTokenRedirect(Object.assign(Object.assign({}, authRequest), {\n        scopes: scopes,\n        redirectStartPage: redirectStartPage\n      }));\n      return EMPTY;\n    }\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\n\n  }, {\n    key: \"getScopesForEndpoint\",\n    value: function getScopesForEndpoint(endpoint, httpMethod) {\n      this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\"); // Ensures endpoints and protected resources compared are normalized\n\n      var normalizedEndpoint = this.location.normalize(endpoint);\n      var protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\n      var matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint); // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\n\n      if (matchingProtectedResources.absoluteResources.length > 0) {\n        return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\n      } else if (matchingProtectedResources.relativeResources.length > 0) {\n        return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\n      }\n\n      return null;\n    }\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint\r\n     * @returns\r\n     */\n\n  }, {\n    key: \"matchResourcesToEndpoint\",\n    value: function matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\n      var _this5 = this;\n\n      var matchingResources = {\n        absoluteResources: [],\n        relativeResources: []\n      };\n      protectedResourcesEndpoints.forEach(function (key) {\n        // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\n        var normalizedKey = _this5.location.normalize(key);\n\n        if (StringUtils.matchPattern(normalizedKey, endpoint)) {\n          matchingResources.absoluteResources.push(key);\n        } // Get url components for relative urls\n\n\n        var absoluteKey = _this5.getAbsoluteUrl(key);\n\n        var keyComponents = new UrlString(absoluteKey).getUrlComponents();\n\n        var absoluteEndpoint = _this5.getAbsoluteUrl(endpoint);\n\n        var endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents(); // Normalized key should include query strings if applicable\n\n        var relativeNormalizedKey = keyComponents.QueryString ? \"\".concat(keyComponents.AbsolutePath, \"?\").concat(keyComponents.QueryString) : _this5.location.normalize(keyComponents.AbsolutePath); // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\n\n        if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\") {\n          matchingResources.relativeResources.push(key);\n        }\n      });\n      return matchingResources;\n    }\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url\r\n     * @returns\r\n     */\n\n  }, {\n    key: \"getAbsoluteUrl\",\n    value: function getAbsoluteUrl(url) {\n      var link = this._document.createElement(\"a\");\n\n      link.href = url;\n      return link.href;\n    }\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns\r\n     */\n\n  }, {\n    key: \"matchScopesToEndpoint\",\n    value: function matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\n      var allMatchedScopes = []; // Check each matched endpoint for matching HttpMethod and scopes\n\n      endpointArray.forEach(function (matchedEndpoint) {\n        var scopesForEndpoint = [];\n        var methodAndScopesArray = protectedResourceMap.get(matchedEndpoint); // Return if resource is unprotected\n\n        if (methodAndScopesArray === null) {\n          allMatchedScopes.push(null);\n          return;\n        }\n\n        methodAndScopesArray.forEach(function (entry) {\n          // Entry is either array of scopes or ProtectedResourceScopes object\n          if (typeof entry === \"string\") {\n            scopesForEndpoint.push(entry);\n          } else {\n            // Ensure methods being compared are normalized\n            var normalizedRequestMethod = httpMethod.toLowerCase();\n            var normalizedResourceMethod = entry.httpMethod.toLowerCase(); // Method in protectedResourceMap matches request http method\n\n            if (normalizedResourceMethod === normalizedRequestMethod) {\n              // Validate if scopes comes null to unprotect the resource in a certain http method \n              if (entry.scopes === null) {\n                allMatchedScopes.push(null);\n              } else {\n                entry.scopes.forEach(function (scope) {\n                  scopesForEndpoint.push(scope);\n                });\n              }\n            }\n          }\n        }); // Only add to all scopes if scopes for endpoint and method is found\n\n        if (scopesForEndpoint.length > 0) {\n          allMatchedScopes.push(scopesForEndpoint);\n        }\n      });\n\n      if (allMatchedScopes.length > 0) {\n        if (allMatchedScopes.length > 1) {\n          this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\n        } // Returns scopes for first matching endpoint\n\n\n        return allMatchedScopes[0];\n      }\n\n      return null;\n    }\n  }]);\n\n  return MsalInterceptor;\n}();\n\nMsalInterceptor.ɵfac = function MsalInterceptor_Factory(t) {\n  return new (t || MsalInterceptor)(ɵngcc0.ɵɵinject(MSAL_INTERCEPTOR_CONFIG), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nMsalInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MsalInterceptor,\n  factory: MsalInterceptor.ɵfac\n});\n\nMsalInterceptor.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MSAL_INTERCEPTOR_CONFIG]\n    }]\n  }, {\n    type: MsalService\n  }, {\n    type: Location\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MsalInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INTERCEPTOR_CONFIG]\n      }]\n    }, {\n      type: MsalService\n    }, {\n      type: ɵngcc1.Location\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nvar MsalRedirectComponent = /*#__PURE__*/function () {\n  function MsalRedirectComponent(authService) {\n    _classCallCheck(this, MsalRedirectComponent);\n\n    this.authService = authService;\n  }\n\n  _createClass(MsalRedirectComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\n      this.authService.handleRedirectObservable().subscribe();\n    }\n  }]);\n\n  return MsalRedirectComponent;\n}();\n\nMsalRedirectComponent.ɵfac = function MsalRedirectComponent_Factory(t) {\n  return new (t || MsalRedirectComponent)(ɵngcc0.ɵɵdirectiveInject(MsalService));\n};\n\nMsalRedirectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MsalRedirectComponent,\n  selectors: [[\"app-redirect\"]],\n  decls: 0,\n  vars: 0,\n  template: function MsalRedirectComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\nMsalRedirectComponent.ctorParameters = function () {\n  return [{\n    type: MsalService\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MsalRedirectComponent, [{\n    type: Component,\n    args: [{\n      selector: \"app-redirect\",\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: MsalService\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nvar MsalModule = /*#__PURE__*/function () {\n  function MsalModule() {\n    _classCallCheck(this, MsalModule);\n  }\n\n  _createClass(MsalModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(msalInstance, guardConfig, interceptorConfig) {\n      return {\n        ngModule: MsalModule,\n        providers: [{\n          provide: MSAL_INSTANCE,\n          useValue: msalInstance\n        }, {\n          provide: MSAL_GUARD_CONFIG,\n          useValue: guardConfig\n        }, {\n          provide: MSAL_INTERCEPTOR_CONFIG,\n          useValue: interceptorConfig\n        }, MsalService]\n      };\n    }\n  }]);\n\n  return MsalModule;\n}();\n\nMsalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MsalModule\n});\nMsalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MsalModule_Factory(t) {\n    return new (t || MsalModule)();\n  },\n  providers: [MsalGuard, MsalBroadcastService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MsalModule, {\n    declarations: function declarations() {\n      return [MsalRedirectComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MsalModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MsalRedirectComponent],\n      imports: [CommonModule],\n      providers: [MsalGuard, MsalBroadcastService]\n    }]\n  }], null, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\r\n */\n\n\nvar MsalCustomNavigationClient = /*#__PURE__*/function (_NavigationClient) {\n  _inherits(MsalCustomNavigationClient, _NavigationClient);\n\n  var _super2 = _createSuper(MsalCustomNavigationClient);\n\n  function MsalCustomNavigationClient(authService, router, location) {\n    var _this6;\n\n    _classCallCheck(this, MsalCustomNavigationClient);\n\n    _this6 = _super2.call(this);\n    _this6.authService = authService;\n    _this6.router = router;\n    _this6.location = location;\n    return _this6;\n  }\n\n  _createClass(MsalCustomNavigationClient, [{\n    key: \"navigateInternal\",\n    value: function navigateInternal(url, options) {\n      var _this7 = this;\n\n      var _super = Object.create(null, {\n        navigateInternal: {\n          get: function get() {\n            return _get(_getPrototypeOf(MsalCustomNavigationClient.prototype), \"navigateInternal\", _this7);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var urlComponents, newUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\n                this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\n                this.authService.getLogger().verbosePii(\"MsalCustomNavigationClient - navigating to url: \".concat(url)); // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\n\n                if (!options.noHistory) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _super.navigateInternal.call(this, url, options));\n\n              case 7:\n                // Normalizing newUrl if no query string\n                urlComponents = new UrlString(url).getUrlComponents();\n                newUrl = urlComponents.QueryString ? \"\".concat(urlComponents.AbsolutePath, \"?\").concat(urlComponents.QueryString) : this.location.normalize(urlComponents.AbsolutePath);\n                this.router.navigateByUrl(newUrl, {\n                  replaceUrl: options.noHistory\n                });\n\n              case 10:\n                return _context.abrupt(\"return\", Promise.resolve(options.noHistory));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return MsalCustomNavigationClient;\n}(NavigationClient);\n\nMsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(t) {\n  return new (t || MsalCustomNavigationClient)(ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc1.Location));\n};\n\nMsalCustomNavigationClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MsalCustomNavigationClient,\n  factory: MsalCustomNavigationClient.ɵfac\n});\n\nMsalCustomNavigationClient.ctorParameters = function () {\n  return [{\n    type: MsalService\n  }, {\n    type: Router\n  }, {\n    type: Location\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MsalCustomNavigationClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MsalService\n    }, {\n      type: ɵngcc2.Router\n    }, {\n      type: ɵngcc1.Location\n    }];\n  }, null);\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService };","map":{"version":3,"sources":["../../src/constants.ts","../../src/packageMetadata.ts","../../src/msal.service.ts","../../src/msal.broadcast.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.redirect.component.ts","../../src/msal.module.ts","../../src/msal.navigation.client.ts","../../src/public-api.ts","../../src/azure-msal-angular.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_INSTANCE = new InjectionToken<string>(\"MSAL_INSTANCE\");\r\n\r\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\"MSAL_GUARD_CONFIG\");\r\n\r\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\"MSAL_INTERCEPTOR_CONFIG\");\r\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-angular\";\nexport const version = \"2.0.2\";\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EndSessionRequest,\r\n    EndSessionPopupRequest,\r\n    AuthenticationResult,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    PopupRequest,\r\n    SsoSilentRequest,\r\n    Logger,\r\n    WrapperSKU\r\n} from \"@azure/msal-browser\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { Observable, from } from \"rxjs\";\r\nimport { IMsalService } from \"./IMsalService\";\r\nimport { name, version } from \"./packageMetadata\";\r\n\r\n@Injectable()\r\nexport class MsalService implements IMsalService {\r\n    private redirectHash: string;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\r\n        private location: Location\r\n    ) {\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n\r\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(hash?: string): Observable<AuthenticationResult> {\r\n        return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\r\n    }\r\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request?: RedirectRequest): Observable<void> {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    logoutRedirect(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logoutRedirect(logoutRequest));\r\n    }\r\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Observable<void> {\r\n        return from(this.instance.logoutPopup(logoutRequest));\r\n    }\r\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger(): Logger {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { EventMessage, EventMessageUtils, IPublicClientApplication, InteractionStatus } from \"@azure/msal-browser\";\r\nimport { MsalService } from \"./msal.service\";\r\n\r\n@Injectable()\r\nexport class MsalBroadcastService {\r\n    private _msalSubject: Subject<EventMessage>;\r\n    public msalSubject$: Observable<EventMessage>;\r\n    private _inProgress: BehaviorSubject<InteractionStatus>;\r\n    public inProgress$: Observable<InteractionStatus>;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication,\r\n        private authService: MsalService\r\n    ) {\r\n        this._msalSubject = new Subject<EventMessage>();\r\n        this.msalSubject$  = this._msalSubject.asObservable();\r\n\r\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\r\n        this._inProgress = new BehaviorSubject<InteractionStatus>(InteractionStatus.Startup);\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n\r\n        this.msalInstance.addEventCallback((message: EventMessage) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\r\n            if (status !== null) {\r\n                this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, CanLoad, UrlTree, Router } from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable, Inject, VERSION } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString, PopupRequest, RedirectRequest, AuthenticationResult } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MSAL_GUARD_CONFIG } from \"./constants\";\r\nimport { concatMap, catchError, map } from \"rxjs/operators\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate, CanActivateChild, CanLoad {\r\n    private loginFailedRoute?: UrlTree;\r\n\r\n    constructor(\r\n        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\r\n        private msalBroadcastService: MsalBroadcastService,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n        private router: Router\r\n    ) { \r\n        // Subscribing so events in MsalGuard will set inProgress$ observable\r\n        this.msalBroadcastService.inProgress$.subscribe();\r\n    }\r\n\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url \r\n     */\r\n    parseUrl(url: string): UrlTree {\r\n        return this.router.parseUrl(url);\r\n    }\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    private loginInteractively(state: RouterStateSnapshot): Observable<boolean> {\r\n        const authRequest = typeof this.msalGuardConfig.authRequest === \"function\"\r\n            ? this.msalGuardConfig.authRequest(this.authService, state)\r\n            : { ...this.msalGuardConfig.authRequest };\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup(authRequest as PopupRequest)\r\n                .pipe(\r\n                    map((response: AuthenticationResult) => {\r\n                        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                        this.authService.instance.setActiveAccount(response.account);\r\n                        return true;\r\n                    })\r\n                );\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(state.url);\r\n        return this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            ...authRequest\r\n        } as RedirectRequest)\r\n            .pipe(\r\n                map(() => false)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state \r\n     */\r\n    private activateHelper(state?: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n         */\r\n        if (typeof window !== \"undefined\") {\r\n            if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\r\n                this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n                return of(false);\r\n            }\r\n        } else {\r\n            this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\r\n            return of(true);\r\n        }\r\n\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n\r\n        // Capture current path before it gets changed by handleRedirectObservable\r\n        const currentPath = this.location.path(true);\r\n\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(\r\n                concatMap(() => {\r\n                    if (!this.authService.instance.getAllAccounts().length) {\r\n                        if (state) {\r\n                            this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                            return this.loginInteractively(state);\r\n                        } \r\n                        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                        return of(false);\r\n                    }\r\n\r\n                    this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\");\r\n\r\n                    // Prevent navigating the app to /#code= or /code=\r\n                    if (state && currentPath.indexOf(\"code=\")> -1) {\r\n                        this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\");\r\n                        \r\n                        // Path routing (navigate to current path without hash)\r\n                        if (currentPath.indexOf(\"#\") > -1) {\r\n                            return of(this.parseUrl(this.location.path()));\r\n                        }\r\n                        \r\n                        // Hash routing (navigate to root path)\r\n                        return of(this.parseUrl(\"\"));\r\n                    }\r\n\r\n                    return of(true);\r\n\r\n                }),\r\n                catchError((error: Error) => {\r\n                    this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\r\n                    this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\r\n                    /**\r\n                     * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n                     * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n                     */\r\n                    if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\r\n                        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                        return of(this.loginFailedRoute);\r\n                    }\r\n                    return of(false);\r\n                })\r\n            );\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean|UrlTree> {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n\r\n    canLoad(): Observable<boolean> {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        // @ts-ignore\r\n        return this.activateHelper();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor\r\n} from \"@angular/common/http\";\r\nimport { Location, DOCUMENT } from \"@angular/common\";\r\nimport { Observable, EMPTY, of } from \"rxjs\";\r\nimport { switchMap, catchError } from \"rxjs/operators\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { AccountInfo, AuthenticationResult, BrowserConfigurationAuthError, InteractionType, StringUtils, UrlString } from \"@azure/msal-browser\";\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport { MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalInterceptorAuthRequest, MsalInterceptorConfiguration, ProtectedResourceScopes, MatchingResources } from \"./msal.interceptor.config\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    private _document?: Document;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INTERCEPTOR_CONFIG) private msalInterceptorConfig: MsalInterceptorConfiguration,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n        @Inject(DOCUMENT) document?: any\r\n    ) {\r\n        this._document = document as Document;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url, req.method);\r\n\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n\r\n        // Sets account as active account or first account\r\n        let account: AccountInfo;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        } else {\r\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n\r\n        const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\"\r\n            ? this.msalInterceptorConfig.authRequest(this.authService, req, { account: account })\r\n            : { ...this.msalInterceptorConfig.authRequest, account };\r\n\r\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent({...authRequest, scopes, account })\r\n            .pipe(\r\n                catchError(() => {\r\n                    this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n                    return this.acquireTokenInteractively(authRequest, scopes);\r\n                }),\r\n                switchMap((result: AuthenticationResult)  => {\r\n                    if (!result.accessToken) {\r\n                        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                        return this.acquireTokenInteractively(authRequest, scopes);\r\n                    }\r\n                    return of(result);\r\n                }),\r\n                switchMap((result: AuthenticationResult) => {\r\n                    this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n                    const headers = req.headers\r\n                        .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n\r\n                    const requestClone = req.clone({headers});\r\n                    return next.handle(requestClone);\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    private acquireTokenInteractively(authRequest: MsalInterceptorAuthRequest, scopes: string[]): Observable<AuthenticationResult> {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup({ ...authRequest, scopes });\r\n        }\r\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect({...authRequest, scopes, redirectStartPage });\r\n        return EMPTY;\r\n    }\r\n\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    private getScopesForEndpoint(endpoint: string, httpMethod: string): Array<string>|null {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n\r\n        // Ensures endpoints and protected resources compared are normalized\r\n        const normalizedEndpoint = this.location.normalize(endpoint);\r\n\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n\r\n        const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\r\n\r\n        // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\r\n        if (matchingProtectedResources.absoluteResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\r\n        } else if (matchingProtectedResources.relativeResources.length > 0){\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint \r\n     * @returns \r\n     */\r\n    private matchResourcesToEndpoint(protectedResourcesEndpoints: string[], endpoint: string): MatchingResources {\r\n        const matchingResources: MatchingResources = {absoluteResources: [], relativeResources: []};\r\n\r\n        protectedResourcesEndpoints.forEach(key => {\r\n            // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\r\n            const normalizedKey = this.location.normalize(key);\r\n            if (StringUtils.matchPattern(normalizedKey, endpoint)){\r\n                matchingResources.absoluteResources.push(key);\r\n            }\r\n            \r\n            // Get url components for relative urls\r\n            const absoluteKey = this.getAbsoluteUrl(key);\r\n            const keyComponents = new UrlString(absoluteKey).getUrlComponents();\r\n            const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\r\n            const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents();\r\n\r\n            // Normalized key should include query strings if applicable\r\n            const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath);\r\n\r\n            // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\r\n            if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\"){\r\n                matchingResources.relativeResources.push(key);\r\n            }\r\n        });\r\n\r\n        return matchingResources;\r\n    }\r\n\r\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url \r\n     * @returns \r\n     */\r\n    private getAbsoluteUrl(url: string): string {\r\n        const link = this._document.createElement(\"a\");\r\n        link.href = url;\r\n        return link.href;\r\n    }\r\n\r\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns \r\n     */\r\n    private matchScopesToEndpoint(protectedResourceMap: Map<string, Array<string|ProtectedResourceScopes> | null>, endpointArray: string[], httpMethod: string): Array<string>|null {\r\n        const allMatchedScopes = [];\r\n\r\n        // Check each matched endpoint for matching HttpMethod and scopes\r\n        endpointArray.forEach(matchedEndpoint => {\r\n            const scopesForEndpoint = [];\r\n            const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\r\n\r\n            // Return if resource is unprotected\r\n            if (methodAndScopesArray === null) {\r\n                allMatchedScopes.push(null);\r\n                return;\r\n            }\r\n\r\n            methodAndScopesArray.forEach(entry => {\r\n                // Entry is either array of scopes or ProtectedResourceScopes object\r\n                if (typeof entry === \"string\") {\r\n                    scopesForEndpoint.push(entry);\r\n                } else {\r\n                    // Ensure methods being compared are normalized\r\n                    const normalizedRequestMethod = httpMethod.toLowerCase();\r\n                    const normalizedResourceMethod = entry.httpMethod.toLowerCase();\r\n                    // Method in protectedResourceMap matches request http method\r\n                    if (normalizedResourceMethod === normalizedRequestMethod) {\r\n                        // Validate if scopes comes null to unprotect the resource in a certain http method \r\n                        if (entry.scopes === null) {\r\n                            allMatchedScopes.push(null);\r\n                        } else {\r\n                            entry.scopes.forEach((scope) => {\r\n                                scopesForEndpoint.push(scope);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Only add to all scopes if scopes for endpoint and method is found\r\n            if (scopesForEndpoint.length > 0) {\r\n                allMatchedScopes.push(scopesForEndpoint);\r\n            }\r\n        });\r\n\r\n        if (allMatchedScopes.length > 0) {\r\n            if (allMatchedScopes.length > 1) {\r\n                this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\r\n            }\r\n            // Returns scopes for first matching endpoint\r\n            return allMatchedScopes[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to \r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\r\n\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { MsalService } from \"./msal.service\";\r\n\r\n@Component({\r\n    selector: \"app-redirect\",\r\n    template: \"\"\r\n})\r\nexport class MsalRedirectComponent implements OnInit {\r\n\r\n    constructor(private authService: MsalService) { }\r\n\r\n    ngOnInit(): void {    \r\n        this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\r\n        this.authService.handleRedirectObservable().subscribe();\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nimport { MsalGuard } from \"./msal.guard\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MSAL_INSTANCE , MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalRedirectComponent } from \"./msal.redirect.component\";\r\n\r\n@NgModule({\r\n    declarations: [MsalRedirectComponent],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    providers: [\r\n        MsalGuard,\r\n        MsalBroadcastService\r\n    ]\r\n})\r\nexport class MsalModule {\r\n    static forRoot(\r\n        msalInstance: IPublicClientApplication,\r\n        guardConfig: MsalGuardConfiguration,\r\n        interceptorConfig: MsalInterceptorConfiguration\r\n    ): ModuleWithProviders<MsalModule> {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NavigationClient, NavigationOptions, UrlString } from \"@azure/msal-browser\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Location } from \"@angular/common\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\r\n */\r\n@Injectable()\r\nexport class MsalCustomNavigationClient extends NavigationClient {\r\n\r\n    constructor(\r\n        private authService: MsalService,\r\n        private router: Router, \r\n        private location: Location\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    async navigateInternal(url:string, options: NavigationOptions): Promise<boolean> {\r\n        this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\r\n        \r\n        this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\r\n        this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\r\n        \r\n        // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\r\n        if (options.noHistory) {\r\n            return super.navigateInternal(url, options);\r\n        } else {\r\n            // Normalizing newUrl if no query string\r\n            const urlComponents = new UrlString(url).getUrlComponents();\r\n            const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\r\n            this.router.navigateByUrl(newUrl, { replaceUrl: options.noHistory });\r\n        }\r\n        return Promise.resolve(options.noHistory);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\r\n\r\nexport { MsalService } from \"./msal.service\";\r\nexport { IMsalService } from \"./IMsalService\";\r\nexport { MsalGuard } from \"./msal.guard\";\r\nexport { MsalGuardConfiguration, MsalGuardAuthRequest } from \"./msal.guard.config\";\r\nexport { MsalInterceptor } from \"./msal.interceptor\";\r\nexport { MsalInterceptorConfiguration, MsalInterceptorAuthRequest, ProtectedResourceScopes } from \"./msal.interceptor.config\";\r\nexport { MSAL_INSTANCE, MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nexport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nexport { MsalModule } from \"./msal.module\";\r\nexport { MsalRedirectComponent } from \"./msal.redirect.component\";\r\nexport { MsalCustomNavigationClient } from \"./msal.navigation.client\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}